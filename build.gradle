apply plugin: "war"
apply plugin: "com.bmuschko.cargo"

def projectRoot = getProjectDir().getAbsolutePath()
def repo = project.hasProperty("repo") ? project.properties["repo"] : "$projectRoot/storage"
def servletSpec = "3.0.1"

ext.testVersions = [
  javaee                  : "7.0",
  wildfly                 : "8.1.0.Final",
  junit                   : "4.11",
  arquillian              : "1.1.5.Final",
  shrinkWrapResolverGradle: "2.2.0-beta-1"
]

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "com.bmuschko:gradle-cargo-plugin:2.0.3"
  }
}

repositories {
  jcenter()
  mavenCentral()

  maven { url "http://repository.jboss.org/nexus/content/groups/public" }
  maven { url "http://repository.jboss.org/nexus/content/repositories/deprecated" }
  maven { url "http://repo.jfrog.org/artifactory/repo" }

  flatDir {
    dirs(libs.split(","))
  }
}

sourceSets {
  integrationTest {
    java {
      srcDir "src/integrationTest/java"

      compileClasspath += main.output
      runtimeClasspath += main.output
    }

    resources {
      srcDir "src/integrationTest/resources"
    }
  }
}

configurations {
  all {
    transitive = true
  }

  [compile, runtime, providedRuntime]*.resolutionStrategy {
    failOnVersionConflict()

    force "com.fasterxml.jackson.core:jackson-annotations:2.+",
      "xml-apis:xml-apis:1.+",
      "org.hamcrest:hamcrest-core:1.+",
      "org.slf4j:slf4j-api:1.+",
      "commons-beanutils:commons-beanutils:1.7.+",
      "commons-collections:commons-collections:3.+"
  }

  testRuntime {
    resolutionStrategy {
      force "org.apache.felix:org.apache.felix.resolver:1.+"
    }
  }

  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime, integrationTestCompile
}

dependencies {
  providedCompile "javax:javaee-api:7.0",
    "javax.json:javax.json-api:1.0" // TODO: remove?

  compile name: "h2-1.4.186"
  compile name: "webcommon"
  compile "javax.jcr:jcr:2.0",
    "org.apache.jackrabbit:jackrabbit-core:2.8.0",
    "org.apache:jackrabbit-ocm:2.0.0",
    "org.slf4j:slf4j-simple:1.7.10"

  testCompile "org.mockito:mockito-core:1.10.19",
    "junit:junit:${testVersions.junit}"

  integrationTestCompile "org.jboss.arquillian.junit:arquillian-junit-container:${testVersions.arquillian}",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:${testVersions.arquillian}",
    "org.wildfly:wildfly-arquillian-container-managed:${testVersions.wildfly}",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:${testVersions.shrinkWrapResolverGradle}",
    "org.jboss.arquillian.extension:arquillian-rest-client-impl-3x:1.0.0.Alpha3",
    "org.jboss.arquillian.protocol:arquillian-protocol-servlet:1.1.7.Final",
    "org.jboss.resteasy:resteasy-jackson-provider:3.0.10.Final",
    "org.mockito:mockito-core:1.10.19",
    "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.1.1"

  def cargoVersion = "1.4.12"
  cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
    "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

cargoRunLocal.dependsOn assemble
cargoStartLocal.dependsOn assemble

cargo {
//  containerId = "wildfly8x"
  containerId = "glassfish4x"
  port = 9090

  deployable {
    context = "/"
  }

  local {
    outputFile = file("build/output.log")
    logLevel = "high"
    timeout = 120000

    if (project.hasProperty("debug")) {
      def port = project.hasProperty("debugPort") ? project.debugPort : 8787
      jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=$port,server=y,suspend=n"
    }

    containerProperties {
      property 'cargo.servlet.users', "Bob:bobpw:Administrator|Sam:sampw:Author|Tim:timpw:Developer"
    }

    installer {
//      installUrl = "http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip"
      installUrl = "http://dlc.sun.com.edgesuite.net/glassfish/4.1/release/glassfish-4.1.zip"
      downloadDir = file("$buildDir/download")
      extractDir = file("containers")
    }

    systemProperties {
      property "app.name", "recursiveloop-cms"
      property "app.logs", "$projectRoot/build/logs"
      property "org.apache.jackrabbit.repository.home", repo
    }
  }
}

war {
  from("src/resources") {
    into "WEB-INF/classes"
    include "*"
  }

  exclude("**/scss")
  exclude("**/js/dev")

  archiveName "ROOT.war"
}

test {
  testLogging {
    exceptionFormat = "full"
    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/unit"
    junitXml.destination = "$buildDir/test-results/unit"
  }
}

task integrationTest(type: Test) {
  description = "Run integration tests."

  outputs.upToDateWhen { false }

  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  def jvmArgs = ""
  if (project.hasProperty("debug")) {
    def port = project.hasProperty("debugPort") ? project.debugPort : 8787
    jvmArgs = "-Xdebug -Xmx512m -XX:MaxPermSize=128m -Xrunjdwp:transport=dt_socket,address=$port,server=y,suspend=y"
  }
  else {
    jvmArgs = "-DDummy"
  }

  systemProperty "project.baseDir", projectRoot
  systemProperty "project.jvmArgs", jvmArgs

  testLogging {
    exceptionFormat = "full"
    showStandardStreams = true
  }

  reports {
    html.destination = "$buildDir/reports/integration"
    junitXml.destination = "$buildDir/test-results/integration"
  }
}
